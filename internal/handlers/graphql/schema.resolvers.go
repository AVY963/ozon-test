package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"ozon-posts/internal/entities"
	"ozon-posts/pkg/errors"

	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
)

// ID is the resolver for the id field.
func (r *commentResolver) ID(ctx context.Context, obj *entities.Comment) (string, error) {
	return obj.ID.String(), nil
}

// PostID is the resolver for the postId field.
func (r *commentResolver) PostID(ctx context.Context, obj *entities.Comment) (string, error) {
	return obj.PostID.String(), nil
}

// AuthorID is the resolver for the authorId field.
func (r *commentResolver) AuthorID(ctx context.Context, obj *entities.Comment) (string, error) {
	return obj.AuthorID.String(), nil
}

// ParentID is the resolver for the parentId field.
func (r *commentResolver) ParentID(ctx context.Context, obj *entities.Comment) (*string, error) {
	if obj.ParentID == nil {
		return nil, nil
	}
	parentIDStr := obj.ParentID.String()
	return &parentIDStr, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *commentResolver) CreatedAt(ctx context.Context, obj *entities.Comment) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *commentResolver) UpdatedAt(ctx context.Context, obj *entities.Comment) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *entities.Comment, limit *int, offset *int) (*CommentConnection, error) {
	l := 20
	if limit != nil {
		l = *limit
	}
	o := 0
	if offset != nil {
		o = *offset
	}

	pagination := &entities.PaginationRequest{
		Limit:  l,
		Offset: o,
	}

	comments, paginationResponse, err := r.commentService.GetCommentReplies(ctx, obj.ID, pagination)
	if err != nil {
		r.logger.WithError(err).WithField("comment_id", obj.ID).Error("Ошибка получения ответов на комментарий")
		return nil, fmt.Errorf("ошибка получения ответов на комментарий: %v", err)
	}

	return &CommentConnection{
		Comments: comments,
		Pagination: &PaginationInfo{
			Total:   int(paginationResponse.Total),
			Limit:   paginationResponse.Limit,
			Offset:  paginationResponse.Offset,
			HasMore: paginationResponse.HasMore,
		},
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input CreateUserInput) (*entities.User, error) {
	user, err := r.userService.CreateUser(ctx, input.Username, input.Email)
	if err != nil {
		r.logger.WithError(err).WithFields(logrus.Fields{
			"username": input.Username,
			"email":    input.Email,
		}).Error("Ошибка создания пользователя")
		return nil, fmt.Errorf("ошибка создания пользователя: %v", err)
	}

	r.logger.WithField("user_id", user.ID).Info("Пользователь успешно создан через GraphQL")
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input UpdateUserInput) (*entities.User, error) {
	return r.Resolver.UpdateUserMutation(ctx, input)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (bool, error) {
	return r.Resolver.DeleteUserMutation(ctx, userID)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input CreatePostInput) (*entities.Post, error) {
	authorID, err := uuid.Parse(input.AuthorID)
	if err != nil {
		r.logger.WithError(err).WithField("author_id", input.AuthorID).Error("Ошибка парсинга UUID автора")
		return nil, errors.NewInvalidRequestError("некорректный формат ID автора")
	}

	post, err := r.postService.CreatePost(ctx, authorID, input.Title, input.Content)
	if err != nil {
		r.logger.WithError(err).WithFields(logrus.Fields{
			"author_id": authorID,
			"title":     input.Title,
		}).Error("Ошибка создания поста")
		return nil, fmt.Errorf("ошибка создания поста: %v", err)
	}

	r.logger.WithField("post_id", post.ID).Info("Пост успешно создан через GraphQL")
	return post, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input UpdatePostInput) (*entities.Post, error) {
	return r.Resolver.UpdatePostMutation(ctx, input)
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, postID string, authorID string) (bool, error) {
	return r.Resolver.DeletePostMutation(ctx, postID, authorID)
}

// ToggleComments is the resolver for the toggleComments field.
func (r *mutationResolver) ToggleComments(ctx context.Context, input ToggleCommentsInput) (bool, error) {
	return r.Resolver.ToggleCommentsMutation(ctx, input)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input CreateCommentInput) (*entities.Comment, error) {
	postID, err := uuid.Parse(input.PostID)
	if err != nil {
		r.logger.WithError(err).WithField("post_id", input.PostID).Error("Ошибка парсинга UUID поста")
		return nil, fmt.Errorf("некорректный формат ID поста: %v", err)
	}

	authorID, err := uuid.Parse(input.AuthorID)
	if err != nil {
		r.logger.WithError(err).WithField("author_id", input.AuthorID).Error("Ошибка парсинга UUID автора")
		return nil, fmt.Errorf("некорректный формат ID автора: %v", err)
	}

	var parentID *uuid.UUID
	if input.ParentID != nil {
		pid, err := uuid.Parse(*input.ParentID)
		if err != nil {
			r.logger.WithError(err).WithField("parent_id", *input.ParentID).Error("Ошибка парсинга UUID родительского комментария")
			return nil, fmt.Errorf("некорректный формат ID родительского комментария: %v", err)
		}
		parentID = &pid
	}

	comment, err := r.commentService.CreateComment(ctx, postID, authorID, input.Content, parentID)
	if err != nil {
		r.logger.WithError(err).WithFields(logrus.Fields{
			"post_id":   postID,
			"author_id": authorID,
			"parent_id": parentID,
		}).Error("Ошибка создания комментария")
		return nil, fmt.Errorf("ошибка создания комментария: %v", err)
	}

	r.logger.WithField("comment_id", comment.ID).Info("Комментарий успешно создан через GraphQL")
	return comment, nil
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, input UpdateCommentInput) (*entities.Comment, error) {
	return r.Resolver.UpdateCommentMutation(ctx, input)
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, commentID string, authorID string) (bool, error) {
	return r.Resolver.DeleteCommentMutation(ctx, commentID, authorID)
}

// ID is the resolver for the id field.
func (r *postResolver) ID(ctx context.Context, obj *entities.Post) (string, error) {
	return obj.ID.String(), nil
}

// AuthorID is the resolver for the authorId field.
func (r *postResolver) AuthorID(ctx context.Context, obj *entities.Post) (string, error) {
	return obj.AuthorID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *postResolver) CreatedAt(ctx context.Context, obj *entities.Post) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *postResolver) UpdatedAt(ctx context.Context, obj *entities.Post) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *entities.Post, limit *int, offset *int) (*CommentConnection, error) {
	l := 20
	if limit != nil {
		l = *limit
	}
	o := 0
	if offset != nil {
		o = *offset
	}

	pagination := &entities.PaginationRequest{
		Limit:  l,
		Offset: o,
	}

	comments, paginationResponse, err := r.commentService.GetPostComments(ctx, obj.ID, pagination)
	if err != nil {
		r.logger.WithError(err).WithField("post_id", obj.ID).Error("Ошибка получения комментариев поста")
		return nil, fmt.Errorf("ошибка получения комментариев поста: %v", err)
	}

	return &CommentConnection{
		Comments: comments,
		Pagination: &PaginationInfo{
			Total:   int(paginationResponse.Total),
			Limit:   paginationResponse.Limit,
			Offset:  paginationResponse.Offset,
			HasMore: paginationResponse.HasMore,
		},
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*entities.User, error) {
	userID, err := uuid.Parse(id)
	if err != nil {
		r.logger.WithError(err).WithField("id", id).Error("Ошибка парсинга UUID пользователя")
		return nil, fmt.Errorf("некорректный формат ID пользователя: %v", err)
	}

	user, err := r.userService.GetUserByID(ctx, userID)
	if err != nil {
		r.logger.WithError(err).WithField("user_id", userID).Error("Ошибка получения пользователя")
		return nil, fmt.Errorf("ошибка получения пользователя: %v", err)
	}

	return user, nil
}

// UserByUsername is the resolver for the userByUsername field.
func (r *queryResolver) UserByUsername(ctx context.Context, username string) (*entities.User, error) {
	user, err := r.userService.GetUserByUsername(ctx, username)
	if err != nil {
		r.logger.WithError(err).WithField("username", username).Error("Ошибка получения пользователя по имени")
		return nil, fmt.Errorf("ошибка получения пользователя: %v", err)
	}

	return user, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*entities.Post, error) {
	postID, err := uuid.Parse(id)
	if err != nil {
		r.logger.WithError(err).WithField("id", id).Error("Ошибка парсинга UUID поста")
		return nil, fmt.Errorf("некорректный формат ID поста: %v", err)
	}

	post, err := r.postService.GetPostByID(ctx, postID)
	if err != nil {
		r.logger.WithError(err).WithField("post_id", postID).Error("Ошибка получения поста")
		return nil, fmt.Errorf("ошибка получения поста: %v", err)
	}

	return post, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) (*PostConnection, error) {
	l := 20
	if limit != nil {
		l = *limit
	}
	o := 0
	if offset != nil {
		o = *offset
	}

	pagination := &entities.PaginationRequest{
		Limit:  l,
		Offset: o,
	}

	posts, paginationResponse, err := r.postService.GetAllPosts(ctx, pagination)
	if err != nil {
		r.logger.WithError(err).Error("Ошибка получения списка постов")
		return nil, fmt.Errorf("ошибка получения постов: %v", err)
	}

	return &PostConnection{
		Posts: posts,
		Pagination: &PaginationInfo{
			Total:   int(paginationResponse.Total),
			Limit:   paginationResponse.Limit,
			Offset:  paginationResponse.Offset,
			HasMore: paginationResponse.HasMore,
		},
	}, nil
}

// PostsByAuthor is the resolver for the postsByAuthor field.
func (r *queryResolver) PostsByAuthor(ctx context.Context, authorID string, limit *int, offset *int) (*PostConnection, error) {
	return r.Resolver.GetPostsByAuthorQuery(ctx, authorID, limit, offset)
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*entities.Comment, error) {
	commentID, err := uuid.Parse(id)
	if err != nil {
		r.logger.WithError(err).WithField("id", id).Error("Ошибка парсинга UUID комментария")
		return nil, fmt.Errorf("некорректный формат ID комментария: %v", err)
	}

	comment, err := r.commentService.GetCommentByID(ctx, commentID)
	if err != nil {
		r.logger.WithError(err).WithField("comment_id", commentID).Error("Ошибка получения комментария")
		return nil, fmt.Errorf("ошибка получения комментария: %v", err)
	}

	return comment, nil
}

// PostComments is the resolver for the postComments field.
func (r *queryResolver) PostComments(ctx context.Context, postID string, limit *int, offset *int) (*CommentConnection, error) {
	pid, err := uuid.Parse(postID)
	if err != nil {
		r.logger.WithError(err).WithField("post_id", postID).Error("Ошибка парсинга UUID поста")
		return nil, fmt.Errorf("некорректный формат ID поста: %v", err)
	}

	l := 20
	if limit != nil {
		l = *limit
	}
	o := 0
	if offset != nil {
		o = *offset
	}

	pagination := &entities.PaginationRequest{
		Limit:  l,
		Offset: o,
	}

	comments, paginationResponse, err := r.commentService.GetPostComments(ctx, pid, pagination)
	if err != nil {
		r.logger.WithError(err).WithField("post_id", pid).Error("Ошибка получения комментариев поста")
		return nil, fmt.Errorf("ошибка получения комментариев поста: %v", err)
	}

	return &CommentConnection{
		Comments: comments,
		Pagination: &PaginationInfo{
			Total:   int(paginationResponse.Total),
			Limit:   paginationResponse.Limit,
			Offset:  paginationResponse.Offset,
			HasMore: paginationResponse.HasMore,
		},
	}, nil
}

// CommentReplies is the resolver for the commentReplies field.
func (r *queryResolver) CommentReplies(ctx context.Context, parentID string, limit *int, offset *int) (*CommentConnection, error) {
	pid, err := uuid.Parse(parentID)
	if err != nil {
		r.logger.WithError(err).WithField("parent_id", parentID).Error("Ошибка парсинга UUID родительского комментария")
		return nil, fmt.Errorf("некорректный формат ID родительского комментария: %v", err)
	}

	l := 20
	if limit != nil {
		l = *limit
	}
	o := 0
	if offset != nil {
		o = *offset
	}

	pagination := &entities.PaginationRequest{
		Limit:  l,
		Offset: o,
	}

	comments, paginationResponse, err := r.commentService.GetCommentReplies(ctx, pid, pagination)
	if err != nil {
		r.logger.WithError(err).WithField("parent_id", pid).Error("Ошибка получения ответов на комментарий")
		return nil, fmt.Errorf("ошибка получения ответов на комментарий: %v", err)
	}

	return &CommentConnection{
		Comments: comments,
		Pagination: &PaginationInfo{
			Total:   int(paginationResponse.Total),
			Limit:   paginationResponse.Limit,
			Offset:  paginationResponse.Offset,
			HasMore: paginationResponse.HasMore,
		},
	}, nil
}

// CommentThread is the resolver for the commentThread field.
func (r *queryResolver) CommentThread(ctx context.Context, commentID string, maxDepth *int) ([]*entities.Comment, error) {
	cid, err := uuid.Parse(commentID)
	if err != nil {
		r.logger.WithError(err).WithField("comment_id", commentID).Error("Ошибка парсинга UUID комментария")
		return nil, fmt.Errorf("некорректный формат ID комментария: %v", err)
	}

	depth := 10
	if maxDepth != nil {
		depth = *maxDepth
	}

	comments, err := r.commentService.GetCommentThread(ctx, cid, depth)
	if err != nil {
		r.logger.WithError(err).WithField("comment_id", cid).Error("Ошибка получения цепочки комментариев")
		return nil, fmt.Errorf("ошибка получения цепочки комментариев: %v", err)
	}

	return comments, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *CommentEvent, error) {
	return r.Resolver.CommentAddedSubscription(ctx, postID)
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *entities.User) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *entities.User) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *entities.User) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
